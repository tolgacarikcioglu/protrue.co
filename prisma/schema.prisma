// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================================================================
// AUTHENTICATION & USERS
// =============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  
  // Profile information
  phone         String?
  bio           String?
  website       String?
  location      String?
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  subscriptions Subscription[]
  reviews       Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  USER
  PROFESSIONAL
  ADMIN
  SUPER_ADMIN
}

// =============================================================================
// CATEGORIES & SECTORS
// =============================================================================

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  parentSlug  String? @map("parent_slug")
  description String?
  icon        String?
  isActive    Boolean @default(true) @map("is_active")
  sortOrder   Int     @default(0) @map("sort_order")
  
  // Metadata
  seoTitle       String? @map("seo_title")
  seoDescription String? @map("seo_description")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  parent           Category?        @relation("CategoryHierarchy", fields: [parentSlug], references: [slug])
  children         Category[]       @relation("CategoryHierarchy")
  companyCategories CompanyCategory[]

  @@index([parentSlug])
  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

// =============================================================================
// COMPANIES & PROFILES
// =============================================================================

model Company {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  website     String?
  email       String?
  phone       String?
  address     String?
  city        String?
  region      String?
  country     String        @default("TR")
  postalCode  String?       @map("postal_code")
  
  // Location coordinates
  latitude    Float?
  longitude   Float?
  
  // Business information
  businessType    BusinessType    @default(SERVICE) @map("business_type")
  yearEstablished Int?           @map("year_established")
  employeeCount   EmployeeCount? @map("employee_count")
  
  // Verification & status
  isVerified     Boolean @default(false) @map("is_verified")
  verifiedAt     DateTime? @map("verified_at")
  isPremium      Boolean @default(false) @map("is_premium")
  isActive       Boolean @default(true) @map("is_active")
  isFeatured     Boolean @default(false) @map("is_featured")
  
  // Media
  logo           String?
  coverImage     String?   @map("cover_image")
  gallery        String    @default("")
  
  // SEO
  seoTitle       String?   @map("seo_title")
  seoDescription String?   @map("seo_description")
  
  // Statistics
  viewCount    Int @default(0) @map("view_count")
  contactCount Int @default(0) @map("contact_count")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String            @map("owner_id")
  categories        CompanyCategory[]
  reviews           Review[]
  subscriptions     Subscription[]

  @@index([slug])
  @@index([isActive])
  @@index([isPremium])
  @@index([isVerified])
  @@index([city])
  @@index([country])
  @@map("companies")
}

model CompanyCategory {
  id         String @id @default(cuid())
  companyId  String @map("company_id")
  categorySlug String @map("category_slug")
  isPrimary  Boolean @default(false) @map("is_primary")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  @@unique([companyId, categorySlug])
  @@index([companyId])
  @@index([categorySlug])
  @@map("company_categories")
}

enum BusinessType {
  SERVICE
  RETAIL
  MANUFACTURING
  CONSULTING
  AGENCY
  FREELANCER
}

enum EmployeeCount {
  SOLO
  SMALL_2_10
  MEDIUM_11_50
  LARGE_51_200
  ENTERPRISE_200_PLUS
}

// =============================================================================
// REVIEWS & RATINGS
// =============================================================================

model Review {
  id        String @id @default(cuid())
  rating    Int    // 1-5 stars
  title     String?
  content   String
  isVerified Boolean @default(false) @map("is_verified")
  
  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String  @map("company_id")
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String  @map("author_id")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([companyId])
  @@index([rating])
  @@index([isVerified])
  @@map("reviews")
}

// =============================================================================
// SUBSCRIPTIONS & BILLING
// =============================================================================

model Subscription {
  id                String             @id @default(cuid())
  status            SubscriptionStatus
  plan              PlanType
  
  // Stripe integration
  stripeCustomerId       String? @map("stripe_customer_id")
  stripeSubscriptionId   String? @unique @map("stripe_subscription_id")
  stripePriceId         String? @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  
  // Billing
  billingCycle    BillingCycle @default(MONTHLY) @map("billing_cycle")
  amount          Float
  currency        String       @default("TRY")
  
  // Periods
  startDate       DateTime     @map("start_date")
  endDate         DateTime?    @map("end_date")
  trialEndsAt     DateTime?    @map("trial_ends_at")
  
  // Relations
  user            User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?      @map("user_id")
  company         Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId       String?      @map("company_id")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}